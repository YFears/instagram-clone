{"version":3,"sources":["firebase.js","Post.js","ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","user","username","caption","imageUrl","postId","time","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","moment","toDate","fromNow","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","setCaption","progress","setProgress","image","setImage","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","message","alert","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","posts","setPosts","open","setOpen","openSignIn","setOpenSignIn","setUsername","email","setEmail","password","setPassword","setUser","onAuthStateChanged","authUser","updateProfile","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","catch","signInWithEmailAndPassword","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.315c778b.chunk.js","sourcesContent":["import firebase from 'firebase'\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyBmQw-Xv_0g9xHqfYsg_zoaF7DNQ49PKPU\",\r\n    authDomain: \"instagram-clone-react-8e2c2.firebaseapp.com\",\r\n    databaseURL: \"https://instagram-clone-react-8e2c2.firebaseio.com\",\r\n    projectId: \"instagram-clone-react-8e2c2\",\r\n    storageBucket: \"instagram-clone-react-8e2c2.appspot.com\",\r\n    messagingSenderId: \"673371734993\",\r\n    appId: \"1:673371734993:web:4a609316159398d73ad6f0\",\r\n    measurementId: \"G-MM5X6WRCTG\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport {db, auth, storage};","import React, { useState, useEffect } from 'react'\r\nimport './Post.css'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { db } from './firebase'\r\nimport firebase from 'firebase'\r\nimport moment from 'moment'\r\n\r\nfunction Post({ user, username, caption, imageUrl, postId, time }) {\r\n    const [comments, setComments] = useState([]);\r\n    const [comment, setComment] = useState('');\r\n\r\n    useEffect(() => {\r\n        let unsubscribe;\r\n        if (postId) {\r\n            unsubscribe = db\r\n                .collection('posts')\r\n                .doc(postId)\r\n                .collection('comments')\r\n                .orderBy('timestamp', 'desc')\r\n                .onSnapshot((snapshot) => {\r\n                    setComments(snapshot.docs.map(doc => doc.data()));\r\n                })\r\n        }\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, [postId])\r\n\r\n    const postComment = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n            text: comment,\r\n            username: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n        setComment('');\r\n    }\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__header\">\r\n                <Avatar alt={username} src=\"/broken-image.jpg\" className=\"post__avatar\" />\r\n                <h3 className=\"post__username\">{username}</h3>\r\n            </div>\r\n            <img\r\n                src={imageUrl}\r\n                alt=\"react logo\"\r\n                className=\"post__image\" />\r\n            <h4 className=\"post__text\"><strong>{username}</strong> {caption}</h4>\r\n\r\n            <div className=\"post__comments\">\r\n                {comments.map(comment => (\r\n                    <p><strong>{comment.username}</strong> {comment.text}</p>\r\n                ))}\r\n            </div>\r\n            <p className=\"post__time\">{moment(time.toDate()).fromNow()}</p>\r\n\r\n            <form className=\"post__commentContainer\">\r\n                <input type=\"text\"\r\n                    className=\"post__input\"\r\n                    placeholder=\"Add a comment...\"\r\n                    value={comment}\r\n                    onChange={(e) => setComment(e.target.value)}\r\n                />\r\n                <button\r\n                    className=\"post__button\"\r\n                    disabled={!comment}\r\n                    type=\"submit\"\r\n                    onClick={postComment}\r\n                >\r\n                    Post\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","import React, { useState } from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { storage, db } from './firebase';\r\nimport firebase from 'firebase'\r\nimport './ImageUpload.css'\r\n\r\nfunction ImageUpload({username}) {\r\n    const [caption, setCaption] = useState('');\r\n    const [progress, setProgress] = useState(0);\r\n    const [image, setImage] = useState(null);\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.files[0]) {\r\n            setImage(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const handleUpload = () => {\r\n        const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n        uploadTask.on(\r\n            'state_changed',\r\n            (snapshot) => {\r\n                // progress function ...\r\n                const progress = Math.round(\r\n                    (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n                );\r\n                setProgress(progress);\r\n            },\r\n            (error) => {\r\n                // error function ...\r\n                console.log(error.message);\r\n                alert(error.message);\r\n            },\r\n            () => {\r\n                // complete function ...\r\n                storage\r\n                .ref('images')\r\n                .child(image.name)\r\n                .getDownloadURL()\r\n                .then( url => {\r\n                    // post image inside db\r\n                    db.collection('posts').add({\r\n                        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                        caption: caption,\r\n                        imageUrl: url,\r\n                        username: username\r\n                    });\r\n\r\n                    setCaption('');\r\n                    setProgress(0);\r\n                    setImage(null);\r\n                })\r\n\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className='imageupload'>\r\n            <progress className='imageupload__progress' value={progress} max ='100'></progress>\r\n            <input type=\"text\" placeholder='Enter a caption' onChange={(e) => setCaption(e.target.value)} />\r\n            <input type=\"file\" onChange={handleChange} />\r\n            <Button onClick={handleUpload}>Upload</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageUpload\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Post from './Post';\nimport { db, auth } from './firebase';\nimport { Modal, makeStyles, Button, Input, Avatar } from '@material-ui/core';\nimport ImageUpload from './ImageUpload';\n\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: 'absolute',\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user has logged in\n        setUser(authUser);\n\n        if (authUser.displayName) {\n          // don't update username\n        } else {\n          // if we just create someone\n          return authUser.updateProfile({\n            displayName: username\n          })\n        }\n      } else {\n        //user has logged out\n        setUser(null);\n      }\n    })\n\n    return () => {\n      // perform some cleanup actions\n      unsubscribe();\n    }\n  }, [user, username])\n\n  useEffect(() => {\n    db.collection('posts').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data(),\n      })))\n    })\n  }, [])\n\n  const signUp = (e) => {\n    e.preventDefault();\n    auth.createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username\n        })\n      })\n      .then(()=> {\n        setOpen(false);\n        setUsername('');\n        setEmail('');\n        setPassword('');\n      })\n      .catch((error) => alert(error.message))\n  }\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .then( ()=> {\n        setOpenSignIn(false);\n        setEmail('');\n        setPassword('');\n      }        \n      )\n      .catch(error => alert(error.message))\n  }\n  \n  return (\n    <div className=\"app\">      \n      <Modal\n        open={open}\n        onClose={() => setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <img\n              src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              alt=\"instagram logo\"\n              className=\"app__headerImage\" />\n            <Input\n              type=\"text\"\n              placeholder=\"username\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              type=\"text\"\n              placeholder=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              type=\"password\"\n              placeholder=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={signUp}>Sign Up</Button>\n          </form>\n        </div>\n      </Modal>\n      <Modal\n        open={openSignIn}\n        onClose={() => setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app__signup\">\n            <img\n              src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n              alt=\"instagram logo\"\n              className=\"app__headerImage\" />\n            <Input\n              type=\"text\"\n              placeholder=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              type=\"password\"\n              placeholder=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <Button onClick={signIn}>Sign In</Button>\n          </form>\n        </div>\n      </Modal>\n\n      <div className=\"app__header\">\n        <img\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"instagram logo\"\n          className=\"app__headerImage\" />\n           {user ? (\n           <div className=\"app__logoutContainer\">\n             <Button type=\"submit\" onClick={() => auth.signOut()}>Logout</Button>\n             <Avatar alt={user.displayName} src=\"/broken-image.jpg\" />\n           </div>) :\n        (<div className=\"app__loginContainer\">\n          <Button type=\"submit\" onClick={() => setOpenSignIn(true)}>Sign In</Button>\n          <Button type=\"submit\" onClick={() => setOpen(true)}>Sign Up</Button>\n        </div>)}\n      </div>   \n      <div className=\"uploadSection\">\n        {user?.displayName? (<ImageUpload username={user.displayName}/>):(\n          <h1>Login to upload posts</h1>\n        )}\n      </div>\n      <div className=\"posts\">\n        {posts.map(({ id, post }) => (          \n          <Post key={id} postId={id} user={user} username={post.username} caption={post.caption} imageUrl={post.imageUrl} time={post.timestamp} />\n        ))}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}